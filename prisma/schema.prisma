generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                            String          @id @default(cuid())
  email                                         String          @unique
  name                                          String?
  createdAt                                     DateTime        @default(now())
  updatedAt                                     DateTime        @updatedAt
  avatar                                        String?
  bio                                           String?
  location                                      String?
  favorites                                     Favorite[]
  listings                                      Listing[]
  receivedMessages                              Message[]       @relation("ReceivedMessages")
  sentMessages                                  Message[]       @relation("SentMessages")
  notifications_notifications_fromUserIdTousers notifications[] @relation("notifications_fromUserIdTousers")
  notifications_notifications_userIdTousers     notifications[] @relation("notifications_userIdTousers")

  @@map("users")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  listings Listing[]

  @@map("categories")
}

model Listing {
  id            String          @id @default(cuid())
  title         String
  description   String
  price         Decimal?
  images        String[]
  status        ListingStatus   @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  categoryId    String
  location      String?
  favorites     Favorite[]
  category      Category        @relation(fields: [categoryId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  notifications notifications[]

  @@index([status, createdAt])
  @@index([categoryId])
  @@index([userId])
  @@map("listings")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("favorites")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  listingId  String
  isRead     Boolean  @default(false)
  receiverId String
  conversationType MessageType @default(REGULAR)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, isRead])
  @@index([listingId])
  @@map("messages")
}

model notifications {
  id                                    String           @id
  type                                  NotificationType
  title                                 String
  message                               String
  read                                  Boolean          @default(false)
  readAt                                DateTime?
  actionUrl                             String?
  createdAt                             DateTime         @default(now())
  updatedAt                             DateTime
  userId                                String
  listingId                             String?
  fromUserId                            String?
  users_notifications_fromUserIdTousers User?            @relation("notifications_fromUserIdTousers", fields: [fromUserId], references: [id], onDelete: Cascade)
  listings                              Listing?         @relation(fields: [listingId], references: [id], onDelete: Cascade)
  users_notifications_userIdTousers     User             @relation("notifications_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, read])
}

enum ListingStatus {
  ACTIVE
  SOLD
  DRAFT
}

enum NotificationType {
  MESSAGE
  FAVORITE
  PRICE_DROP
  LISTING_UPDATE
  USER
}

enum MessageType {
  REGULAR
  CONVERSATION_STARTER
}
