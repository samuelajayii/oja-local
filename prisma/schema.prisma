generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                            String          @id @default(cuid())
  email                                         String          @unique
  name                                          String?
  createdAt                                     DateTime        @default(now())
  updatedAt                                     DateTime        @updatedAt
  avatar                                        String?
  bio                                           String?
  location                                      String?
  conversationsAsUser1                          Conversation[]  @relation("User1Conversations")
  conversationsAsUser2                          Conversation[]  @relation("User2Conversations")
  favorites                                     Favorite[]
  listings                                      Listing[]
  receivedMessages                              Message[]       @relation("ReceivedMessages")
  sentMessages                                  Message[]       @relation("SentMessages")
  notifications_notifications_fromUserIdTousers notifications[] @relation("notifications_fromUserIdTousers")
  notifications_notifications_userIdTousers     notifications[] @relation("notifications_userIdTousers")
  buyerTransactions                             Transaction[]   @relation("BuyerTransactions")
  sellerTransactions                            Transaction[]   @relation("SellerTransactions")

  @@map("users")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  listings Listing[]

  @@map("categories")
}

model Listing {
  id                   String          @id @default(cuid())
  title                String
  description          String
  price                Decimal?
  images               String[]
  status               ListingStatus   @default(ACTIVE)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  userId               String
  categoryId           String
  location             String?
  aiCategoryConfidence Decimal?
  contentStatus        ContentStatus   @default(APPROVED)
  extractedText        String?
  moderationFlags      String[]
  visionAnalysis       Json?
  conversations        Conversation[]
  favorites            Favorite[]
  imageAnalyses        ImageAnalysis[]
  category             Category        @relation(fields: [categoryId], references: [id])
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages             Message[]
  notifications        notifications[]
  transaction          Transaction?

  @@index([status, createdAt])
  @@index([categoryId])
  @@index([userId])
  @@index([contentStatus])
  @@map("listings")
}

model ImageAnalysis {
  id              String       @id @default(cuid())
  listingId       String
  imageUrl        String
  analysisType    AnalysisType
  analysisResult  Json
  safeContent     Boolean      @default(true)
  needsReview     Boolean      @default(false)
  confidenceScore Decimal?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  listing         Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([safeContent])
  @@index([needsReview])
  @@index([analysisType])
  @@map("image_analyses")
}

model Conversation {
  id            String             @id @default(cuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lastMessageAt DateTime           @default(now())
  listingId     String
  user1Id       String
  user2Id       String
  status        ConversationStatus @default(ACTIVE)
  listing       Listing            @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user1         User               @relation("User1Conversations", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User               @relation("User2Conversations", fields: [user2Id], references: [id], onDelete: Cascade)
  messages      Message[]
  transaction   Transaction?

  @@unique([listingId, user1Id, user2Id])
  @@index([listingId])
  @@index([user1Id])
  @@index([user2Id])
  @@index([lastMessageAt])
  @@map("conversations")
}

model Transaction {
  id              String            @id @default(cuid())
  listingId       String            @unique
  conversationId  String            @unique
  sellerId        String
  buyerId         String
  agreedPrice     Decimal
  status          TransactionStatus @default(PENDING)
  sellerConfirmed Boolean           @default(false)
  buyerConfirmed  Boolean           @default(false)
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  buyer           User              @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  listing         Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  seller          User              @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([buyerId])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("favorites")
}

model Message {
  id               String       @id @default(cuid())
  content          String
  createdAt        DateTime     @default(now())
  senderId         String
  listingId        String
  isRead           Boolean      @default(false)
  receiverId       String
  conversationType MessageType  @default(REGULAR)
  conversationId   String
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  listing          Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  receiver         User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender           User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, isRead])
  @@index([listingId])
  @@index([conversationId])
  @@map("messages")
}

model notifications {
  id                                    String           @id
  type                                  NotificationType
  title                                 String
  message                               String
  read                                  Boolean          @default(false)
  readAt                                DateTime?
  actionUrl                             String?
  createdAt                             DateTime         @default(now())
  updatedAt                             DateTime
  userId                                String
  listingId                             String?
  fromUserId                            String?
  users_notifications_fromUserIdTousers User?            @relation("notifications_fromUserIdTousers", fields: [fromUserId], references: [id], onDelete: Cascade)
  listings                              Listing?         @relation(fields: [listingId], references: [id], onDelete: Cascade)
  users_notifications_userIdTousers     User             @relation("notifications_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, read])
}

enum ListingStatus {
  ACTIVE
  SOLD
  DRAFT
}

enum ContentStatus {
  APPROVED
  PENDING_REVIEW
  REJECTED
  FLAGGED
}

enum AnalysisType {
  MODERATION
  TEXT_EXTRACTION
  CATEGORIZATION
  COMPREHENSIVE
}

enum ConversationStatus {
  ACTIVE
  TRANSACTION_PENDING
  TRANSACTION_COMPLETED
  ARCHIVED
}

enum TransactionStatus {
  PENDING
  SELLER_CONFIRMED
  BUYER_CONFIRMED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  MESSAGE
  FAVORITE
  PRICE_DROP
  LISTING_UPDATE
  USER
  TRANSACTION_CONFIRMED
  TRANSACTION_COMPLETED
  CONTENT_FLAGGED
  ANALYSIS_COMPLETE
}

enum MessageType {
  REGULAR
  CONVERSATION_STARTER
}
